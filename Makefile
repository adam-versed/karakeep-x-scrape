# Development Monitoring Makefile
# Generated by setup-dev-monitoring on 2025-10-15 10:44:49
# Components: FRONTEND, WORKERS, LANDING

# WARNING: Claude should NEVER run 'make dev' or 'make start' commands
# These are USER-ONLY commands for starting development services

.PHONY: help dev stop frontend workers landing status logs tail-logs health monitor clean check-procfile

# Default target
help:
	@echo "Available targets:"
	@echo "  dev          - Start all services with shoreman (USER ONLY)"
	@echo "  stop         - Stop all development services (USER ONLY)"
	@echo "  status       - Show service status"
	@echo "  logs         - Show aggregated logs"
	@echo "  tail-logs    - Follow logs in real-time"
	@echo "  health       - Check service health"
	@echo "  monitor      - Show system monitoring dashboard"
	@echo "  clean        - Clean logs and temporary files"
	@echo "  check-procfile - Validate Procfile syntax"
	@echo ""
	@echo "Component-specific targets:"
	@echo "  frontend       - Start FRONTEND service (USER ONLY)"
	@echo "  workers        - Start WORKERS service (USER ONLY)"
	@echo "  landing        - Start LANDING service (USER ONLY)"
	@echo "  frontend-status  - Check FRONTEND status"
	@echo "  frontend-logs    - Show FRONTEND logs"
	@echo "  workers-status  - Check WORKERS status"
	@echo "  workers-logs    - Show WORKERS logs"
	@echo "  landing-status  - Check LANDING status"
	@echo "  landing-logs    - Show LANDING logs"

# USER-ONLY COMMANDS - Claude should never execute these
dev:
	@echo "Starting development services..."
	@echo "Clearing previous logs..."
	@rm -f ./dev.log
	@touch ./dev.log
	@if command -v shoreman >/dev/null 2>&1; then \
		echo "Using shoreman process manager..."; \
		shoreman Procfile /dev/null 2>&1 | while IFS= read -r line; do echo "[$$(date '+%H:%M:%S')] [SYSTEM] $$line"; done | tee -a ./dev.log; \
	elif command -v foreman >/dev/null 2>&1; then \
		echo "Using foreman process manager..."; \
		foreman start 2>&1 | while IFS= read -r line; do echo "[$$(date '+%H:%M:%S')] [SYSTEM] $$line"; done | tee -a ./dev.log; \
	else \
		echo "ERROR: Neither shoreman nor foreman found."; \
		echo "Install shoreman: gem install shoreman"; \
		echo "Install foreman: gem install foreman"; \
		exit 1; \
	fi


stop:
	@echo "Stopping development services..."
	@echo "Services stopped."

frontend:
	@echo "Starting FRONTEND service..."
	@cd apps/web && PORT=3000 pnpm dev 2>&1 | while IFS= read -r line; do echo "[$$(date '+%H:%M:%S')] [FRONTEND] $$line"; done | tee -a ./dev.log

workers:
	@echo "Starting WORKERS service..."
	@cd apps/workers && pnpm start 2>&1 | while IFS= read -r line; do echo "[$$(date '+%H:%M:%S')] [WORKERS] $$line"; done | tee -a ./dev.log

landing:
	@echo "Starting LANDING service..."
	@cd apps/landing && PORT=5173 pnpm dev 2>&1 | while IFS= read -r line; do echo "[$$(date '+%H:%M:%S')] [LANDING] $$line"; done | tee -a ./dev.log

# CLAUDE-ACCESSIBLE COMMANDS - Safe for AI to execute
status:
	@echo "=== Service Status ==="

	@if curl -sf http://localhost:3000 >/dev/null 2>&1; then \
		echo "FRONTEND: ✓ Running (port 3000)"; \
	else \
		echo "FRONTEND: ✗ Not responding (port 3000)"; \
	fi
	@if pgrep -f "workers" >/dev/null 2>&1; then \
		echo "WORKERS: ✓ Process running"; \
	else \
		echo "WORKERS: ✗ Process not found"; \
	fi
	@if curl -sf http://localhost:5173 >/dev/null 2>&1; then \
		echo "LANDING: ✓ Running (port 5173)"; \
	else \
		echo "LANDING: ✗ Not responding (port 5173)"; \
	fi

frontend-status:
	@echo "=== FRONTEND Status ==="
	@if curl -sf http://localhost:3000 >/dev/null 2>&1; then \
		echo "FRONTEND: ✓ Running (port 3000)"; \
	else \
		echo "FRONTEND: ✗ Not responding (port 3000)"; \
	fi

workers-status:
	@echo "=== WORKERS Status ==="
	@if pgrep -f "workers" >/dev/null 2>&1; then \
		echo "WORKERS: ✓ Process running"; \
	else \
		echo "WORKERS: ✗ Process not found"; \
	fi

landing-status:
	@echo "=== LANDING Status ==="
	@if curl -sf http://localhost:5173 >/dev/null 2>&1; then \
		echo "LANDING: ✓ Running (port 5173)"; \
	else \
		echo "LANDING: ✗ Not responding (port 5173)"; \
	fi


logs:
	@echo "=== Recent Logs ==="
	@if [ -f "./dev.log" ]; then tail -100 ./dev.log; else echo "No ./dev.log found"; fi

tail-logs:
	@echo "=== Following Logs (Ctrl+C to exit) ==="
	@echo "Killing any existing tail processes..."
	@pkill -f "tail -f.*dev.log" 2>/dev/null || true
	@if [ -f "./dev.log" ]; then tail -f ./dev.log; else echo "No ./dev.log found. Start services first."; fi


frontend-logs:
	@echo "=== FRONTEND Logs ==="
	@if [ -f "./dev.log" ]; then grep "\[FRONTEND\]" ./dev.log | tail -50; else echo "No ./dev.log found"; fi


workers-logs:
	@echo "=== WORKERS Logs ==="
	@if [ -f "./dev.log" ]; then grep "\[WORKERS\]" ./dev.log | tail -50; else echo "No ./dev.log found"; fi


landing-logs:
	@echo "=== LANDING Logs ==="
	@if [ -f "./dev.log" ]; then grep "\[LANDING\]" ./dev.log | tail -50; else echo "No ./dev.log found"; fi



health:
	@echo "=== Health Check ==="

	@curl -sf http://localhost:3000/health 2>/dev/null && \
		echo "FRONTEND: ✓ Healthy" || \
		echo "FRONTEND: ✗ Unhealthy"

	@curl -sf http://localhost:5173/health 2>/dev/null && \
		echo "LANDING: ✓ Healthy" || \
		echo "LANDING: ✗ Unhealthy"


frontend-health:
	@echo "=== FRONTEND Health ==="
	@curl -sf http://localhost:3000/health 2>/dev/null && \
		echo "FRONTEND: ✓ Healthy" || \
		echo "FRONTEND: ✗ Unhealthy"


landing-health:
	@echo "=== LANDING Health ==="
	@curl -sf http://localhost:5173/health 2>/dev/null && \
		echo "LANDING: ✓ Healthy" || \
		echo "LANDING: ✗ Unhealthy"


monitor:
	@echo "=== System Monitor ==="
	@echo "Memory Usage:"
	@free -h 2>/dev/null || vm_stat | head -5
	@echo "Disk Usage:"
	@df -h . | tail -1
	@echo "Active Processes:"
	@ps aux | head -1
	@ps aux | grep -E "(node|python|go|cargo)" | grep -v grep | head -10 || echo "No monitored processes found"

check-procfile:
	@echo "=== Validating Procfile ==="
	@if [ ! -f "Procfile" ]; then \
		echo "❌ Procfile not found"; \
		exit 1; \
	fi
	@echo "✓ Procfile exists"
	@if grep -q "^#" Procfile; then \
		echo "⚠️  Warning: Procfile contains comments that may cause issues with shoreman"; \
	else \
		echo "✓ No problematic comments found"; \
	fi
	@if wc -l < Procfile | grep -q "^0"; then \
		echo "❌ Procfile is empty"; \
		exit 1; \
	fi
	@echo "✓ Procfile has content"
	@echo "✓ Procfile validation complete"

clean:
	@echo "Cleaning logs and temporary files..."
	@rm -f ./dev.log *.pid
	@echo "Clean complete"
